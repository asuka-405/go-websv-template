// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: update.sql

package libdb

import (
	"context"
	"database/sql"

	"github.com/sqlc-dev/pqtype"
)

const updateIdentityDesignation = `-- name: UpdateIdentityDesignation :exec
UPDATE identity
SET designation = $2
WHERE username = $1
`

type UpdateIdentityDesignationParams struct {
	Username    string
	Designation sql.NullString
}

func (q *Queries) UpdateIdentityDesignation(ctx context.Context, arg UpdateIdentityDesignationParams) error {
	_, err := q.db.ExecContext(ctx, updateIdentityDesignation, arg.Username, arg.Designation)
	return err
}

const updateIdentityDetails = `-- name: UpdateIdentityDetails :exec
UPDATE identity
SET details = $2
WHERE username = $1
`

type UpdateIdentityDetailsParams struct {
	Username string
	Details  pqtype.NullRawMessage
}

func (q *Queries) UpdateIdentityDetails(ctx context.Context, arg UpdateIdentityDetailsParams) error {
	_, err := q.db.ExecContext(ctx, updateIdentityDetails, arg.Username, arg.Details)
	return err
}

const updateIdentityEmail = `-- name: UpdateIdentityEmail :exec
UPDATE identity
SET email = $2
WHERE username = $1
`

type UpdateIdentityEmailParams struct {
	Username string
	Email    string
}

func (q *Queries) UpdateIdentityEmail(ctx context.Context, arg UpdateIdentityEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateIdentityEmail, arg.Username, arg.Email)
	return err
}

const updateIdentityFirstName = `-- name: UpdateIdentityFirstName :exec
UPDATE identity
SET first_name = $2
WHERE username = $1
`

type UpdateIdentityFirstNameParams struct {
	Username  string
	FirstName sql.NullString
}

func (q *Queries) UpdateIdentityFirstName(ctx context.Context, arg UpdateIdentityFirstNameParams) error {
	_, err := q.db.ExecContext(ctx, updateIdentityFirstName, arg.Username, arg.FirstName)
	return err
}

const updateIdentityInactiveStatus = `-- name: UpdateIdentityInactiveStatus :exec
UPDATE identity
SET protected = $2
WHERE username = $1
`

type UpdateIdentityInactiveStatusParams struct {
	Username  string
	Protected bool
}

func (q *Queries) UpdateIdentityInactiveStatus(ctx context.Context, arg UpdateIdentityInactiveStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateIdentityInactiveStatus, arg.Username, arg.Protected)
	return err
}

const updateIdentityLastName = `-- name: UpdateIdentityLastName :exec
UPDATE identity
SET last_name = $2
WHERE username = $1
`

type UpdateIdentityLastNameParams struct {
	Username string
	LastName sql.NullString
}

func (q *Queries) UpdateIdentityLastName(ctx context.Context, arg UpdateIdentityLastNameParams) error {
	_, err := q.db.ExecContext(ctx, updateIdentityLastName, arg.Username, arg.LastName)
	return err
}

const updateIdentityManagerStatus = `-- name: UpdateIdentityManagerStatus :exec
UPDATE identity
SET is_manager = $2
WHERE username = $1
`

type UpdateIdentityManagerStatusParams struct {
	Username  string
	IsManager bool
}

func (q *Queries) UpdateIdentityManagerStatus(ctx context.Context, arg UpdateIdentityManagerStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateIdentityManagerStatus, arg.Username, arg.IsManager)
	return err
}

const updateIdentityManagerUsername = `-- name: UpdateIdentityManagerUsername :exec
UPDATE identity
SET is_manager = $2
WHERE username = $1
`

type UpdateIdentityManagerUsernameParams struct {
	Username  string
	IsManager bool
}

func (q *Queries) UpdateIdentityManagerUsername(ctx context.Context, arg UpdateIdentityManagerUsernameParams) error {
	_, err := q.db.ExecContext(ctx, updateIdentityManagerUsername, arg.Username, arg.IsManager)
	return err
}

const updateIdentityPasswordHash = `-- name: UpdateIdentityPasswordHash :exec
UPDATE identity
SET password_hash = $2
WHERE username = $1
`

type UpdateIdentityPasswordHashParams struct {
	Username     string
	PasswordHash []byte
}

func (q *Queries) UpdateIdentityPasswordHash(ctx context.Context, arg UpdateIdentityPasswordHashParams) error {
	_, err := q.db.ExecContext(ctx, updateIdentityPasswordHash, arg.Username, arg.PasswordHash)
	return err
}

const updateIdentityProtectedStatus = `-- name: UpdateIdentityProtectedStatus :exec
UPDATE identity
SET protected = $2
WHERE username = $1
`

type UpdateIdentityProtectedStatusParams struct {
	Username  string
	Protected bool
}

func (q *Queries) UpdateIdentityProtectedStatus(ctx context.Context, arg UpdateIdentityProtectedStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateIdentityProtectedStatus, arg.Username, arg.Protected)
	return err
}

const updateIdentityUsername = `-- name: UpdateIdentityUsername :exec
BEGIN
`

func (q *Queries) UpdateIdentityUsername(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, updateIdentityUsername)
	return err
}
