// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: read.sql

package libdb

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const filterIdentityByDesignation = `-- name: FilterIdentityByDesignation :many
SELECT id, username, first_name, last_name, email, is_manager, manager_username, details, designation, password_hash, created_at, modified_at, protected, inactive, deleted_at FROM v_identity
WHERE designation = $1
`

func (q *Queries) FilterIdentityByDesignation(ctx context.Context, designation sql.NullString) ([]VIdentity, error) {
	rows, err := q.db.QueryContext(ctx, filterIdentityByDesignation, designation)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []VIdentity
	for rows.Next() {
		var i VIdentity
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.IsManager,
			&i.ManagerUsername,
			&i.Details,
			&i.Designation,
			&i.PasswordHash,
			&i.CreatedAt,
			&i.ModifiedAt,
			&i.Protected,
			&i.Inactive,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const filterIdentityByFirstName = `-- name: FilterIdentityByFirstName :many
SELECT id, username, first_name, last_name, email, is_manager, manager_username, details, designation, password_hash, created_at, modified_at, protected, inactive, deleted_at FROM v_identity
WHERE first_name = $1
`

func (q *Queries) FilterIdentityByFirstName(ctx context.Context, firstName sql.NullString) ([]VIdentity, error) {
	rows, err := q.db.QueryContext(ctx, filterIdentityByFirstName, firstName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []VIdentity
	for rows.Next() {
		var i VIdentity
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.IsManager,
			&i.ManagerUsername,
			&i.Details,
			&i.Designation,
			&i.PasswordHash,
			&i.CreatedAt,
			&i.ModifiedAt,
			&i.Protected,
			&i.Inactive,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const filterIdentityByLastName = `-- name: FilterIdentityByLastName :many
SELECT id, username, first_name, last_name, email, is_manager, manager_username, details, designation, password_hash, created_at, modified_at, protected, inactive, deleted_at FROM v_identity
WHERE last_name = $1
`

func (q *Queries) FilterIdentityByLastName(ctx context.Context, lastName sql.NullString) ([]VIdentity, error) {
	rows, err := q.db.QueryContext(ctx, filterIdentityByLastName, lastName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []VIdentity
	for rows.Next() {
		var i VIdentity
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.IsManager,
			&i.ManagerUsername,
			&i.Details,
			&i.Designation,
			&i.PasswordHash,
			&i.CreatedAt,
			&i.ModifiedAt,
			&i.Protected,
			&i.Inactive,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const filterIdentityByManagerUsername = `-- name: FilterIdentityByManagerUsername :many
SELECT id, username, first_name, last_name, email, is_manager, manager_username, details, designation, password_hash, created_at, modified_at, protected, inactive, deleted_at FROM v_identity
WHERE manager_username = $1
`

func (q *Queries) FilterIdentityByManagerUsername(ctx context.Context, managerUsername sql.NullString) ([]VIdentity, error) {
	rows, err := q.db.QueryContext(ctx, filterIdentityByManagerUsername, managerUsername)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []VIdentity
	for rows.Next() {
		var i VIdentity
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.IsManager,
			&i.ManagerUsername,
			&i.Details,
			&i.Designation,
			&i.PasswordHash,
			&i.CreatedAt,
			&i.ModifiedAt,
			&i.Protected,
			&i.Inactive,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIdentityByEmail = `-- name: GetIdentityByEmail :one
SELECT id, username, first_name, last_name, email, is_manager, manager_username, details, designation, password_hash, created_at, modified_at, protected, inactive, deleted_at FROM v_identity
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetIdentityByEmail(ctx context.Context, email string) (VIdentity, error) {
	row := q.db.QueryRowContext(ctx, getIdentityByEmail, email)
	var i VIdentity
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.IsManager,
		&i.ManagerUsername,
		&i.Details,
		&i.Designation,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.Protected,
		&i.Inactive,
		&i.DeletedAt,
	)
	return i, err
}

const getIdentityByID = `-- name: GetIdentityByID :one
SELECT id, username, first_name, last_name, email, is_manager, manager_username, details, designation, password_hash, created_at, modified_at, protected, inactive, deleted_at FROM v_identity
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetIdentityByID(ctx context.Context, id uuid.UUID) (VIdentity, error) {
	row := q.db.QueryRowContext(ctx, getIdentityByID, id)
	var i VIdentity
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.IsManager,
		&i.ManagerUsername,
		&i.Details,
		&i.Designation,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.Protected,
		&i.Inactive,
		&i.DeletedAt,
	)
	return i, err
}

const getIdentityByUsername = `-- name: GetIdentityByUsername :one
SELECT id, username, first_name, last_name, email, is_manager, manager_username, details, designation, password_hash, created_at, modified_at, protected, inactive, deleted_at FROM v_identity
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetIdentityByUsername(ctx context.Context, username string) (VIdentity, error) {
	row := q.db.QueryRowContext(ctx, getIdentityByUsername, username)
	var i VIdentity
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.IsManager,
		&i.ManagerUsername,
		&i.Details,
		&i.Designation,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.Protected,
		&i.Inactive,
		&i.DeletedAt,
	)
	return i, err
}
