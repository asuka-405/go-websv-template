// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: create.sql

package libdb

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const createIdentity = `-- name: CreateIdentity :exec
INSERT INTO identity (username, first_name, last_name, email, is_manager, manager_username, details, designation, password_hash, protected, inactive)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
`

type CreateIdentityParams struct {
	Username        string
	FirstName       sql.NullString
	LastName        sql.NullString
	Email           string
	IsManager       bool
	ManagerUsername sql.NullString
	Details         pqtype.NullRawMessage
	Designation     sql.NullString
	PasswordHash    []byte
	Protected       bool
	Inactive        bool
}

func (q *Queries) CreateIdentity(ctx context.Context, arg CreateIdentityParams) error {
	_, err := q.db.ExecContext(ctx, createIdentity,
		arg.Username,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.IsManager,
		arg.ManagerUsername,
		arg.Details,
		arg.Designation,
		arg.PasswordHash,
		arg.Protected,
		arg.Inactive,
	)
	return err
}

const createIdentityReturningAll = `-- name: CreateIdentityReturningAll :one
INSERT INTO identity (username, first_name, last_name, email, is_manager, manager_username, details, designation, password_hash, protected, inactive)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING id, username, first_name, last_name, email, is_manager, manager_username, details, designation, password_hash, created_at, modified_at, protected, inactive, deleted_at
`

type CreateIdentityReturningAllParams struct {
	Username        string
	FirstName       sql.NullString
	LastName        sql.NullString
	Email           string
	IsManager       bool
	ManagerUsername sql.NullString
	Details         pqtype.NullRawMessage
	Designation     sql.NullString
	PasswordHash    []byte
	Protected       bool
	Inactive        bool
}

func (q *Queries) CreateIdentityReturningAll(ctx context.Context, arg CreateIdentityReturningAllParams) (Identity, error) {
	row := q.db.QueryRowContext(ctx, createIdentityReturningAll,
		arg.Username,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.IsManager,
		arg.ManagerUsername,
		arg.Details,
		arg.Designation,
		arg.PasswordHash,
		arg.Protected,
		arg.Inactive,
	)
	var i Identity
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.IsManager,
		&i.ManagerUsername,
		&i.Details,
		&i.Designation,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.Protected,
		&i.Inactive,
		&i.DeletedAt,
	)
	return i, err
}

const createIdentityReturningID = `-- name: CreateIdentityReturningID :one
INSERT INTO identity (username, first_name, last_name, email, is_manager, manager_username, details, designation, password_hash, protected, inactive)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING id
`

type CreateIdentityReturningIDParams struct {
	Username        string
	FirstName       sql.NullString
	LastName        sql.NullString
	Email           string
	IsManager       bool
	ManagerUsername sql.NullString
	Details         pqtype.NullRawMessage
	Designation     sql.NullString
	PasswordHash    []byte
	Protected       bool
	Inactive        bool
}

func (q *Queries) CreateIdentityReturningID(ctx context.Context, arg CreateIdentityReturningIDParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createIdentityReturningID,
		arg.Username,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.IsManager,
		arg.ManagerUsername,
		arg.Details,
		arg.Designation,
		arg.PasswordHash,
		arg.Protected,
		arg.Inactive,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
